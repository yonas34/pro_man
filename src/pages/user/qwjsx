import React, { useEffect, useState } from "react";
import axios from "axios";
import { useSelector } from "react-redux";
import MaterialTable, { MTableToolbar } from "material-table";
import tableIcons from "../../component/tableIcons";
import {
  Card,
  IconButton,
  MenuItem,
  TextField,
  Typography,
} from "@material-ui/core";
import SubTable from "../../component/user/SubTable";
import { data as datas } from "./data";
import ResourceMenu, { emp as emps } from "../../component/user/ResourceMenu";
import moment from "moment";
import { Grid } from "@material-ui/core";
import { useStateIfMounted } from "use-state-if-mounted";
import { Save } from "@material-ui/icons";
import ActivityReport from "../../component/user/ActivityReport";
import { dateDifference } from "../../component/user/utils";

function Manpower() {
  const user = useSelector((state) => state.user);
  const [project, setProject] = useState([]);
  const [resource, setResource] = useState({});
  const date = new Date();
  const [data, setData] = useState([
    {
      resource_id: 29,
      engine_hrs_beg:
        date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds(),
      engine_hrs_end: 22,
      operational_hrs_from: 2,
      operational_hrs_to: 2,
      operational_total_hrs: 4,
      idle_hrs_from: 3,
      idle_hrs_to: 2,
      idle_total_hrs: 3,
      idle_reason: "lunch",
      down_hrs_from: 3,
      down_hrs_to: 4,
      down_total_hrs: 3,
      down_reason: "brocken",
      fuel: 4,
    },
    {
      resource_id: 30,
      engine_hrs_beg:
        date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds(),
      engine_hrs_end: 22,
      operational_hrs_from: 2,
      operational_hrs_to: 2,
      operational_total_hrs: 4,
      idle_hrs_from: 3,
      idle_hrs_to: 2,
      idle_total_hrs: 3,
      idle_reason: "lunch",
      down_hrs_from: 3,
      down_hrs_to: 4,
      down_total_hrs: 3,
      down_reason: "brocken",
      fuel: 4,
    },
  ]);
  const [data_emp, setData_emp] = useState([]);
  const [selectedRow_emp, setSelectedRow_emp] = useState(0);
  const tableRef_emp = React.createRef();

  const [dataOutLine, setDataOutLine] = useState([]);
  const [activity, setActivity] = useState([]);
  const [projectActivity, setProjectActivity] = useState([]);
  const [setup, setSetup] = useState(false);

  const [selectedRow, setSelectedRow] = useState(0);
  const tableRef = React.createRef();
  const [resourceObj, setResourceObj] = useState([]);
  const [material, setMaterial] = useState([]);
  var resourceTypeReformatted = null;
  const [ap, setAp] = useState();
  const [exec, setExec] = useState("");
  const [emp, setEmp] = useState([]);
  const [selectedProject, setSelectedProject] = useState(
    user.resp[0].project_id
  );

  const actRef = React.createRef();
  const proRef = React.createRef();
  const [selectedActivity, setSelectedActivity] = useState(0);
  const AP_id = () => {
    return projectActivity.reduce((acc, cur, i) => {
      acc[cur.activity_id] = cur.id;
      return acc;
    }, {});
  };

  const [empPro, setEmpPro] = useState();

  const empObj = emp.reduce((acc, cur, i) => {
    acc[cur.emp_id] = cur.first_name + " " + cur.last_name;
    return acc;
  });
  const empPic = emp.reduce((acc, cur, i) => {
    acc[cur.emp_id] = cur.emp_pic;
    return acc;
  });

  user.resp.reduce(async (acc, cur) => {
    if (!project.find((pro) => pro.project_id == cur.project_id)) {
      await axios
        .post("https://www.nrwlpms.org/api/api/get_single_project.php", {
          project_id: cur.project_id,
          jwt: user.token,
        })
        .then((response) => {
          setProject([...project, response.data.data]);

          ResourceMenu(user.resp[0].project_id, user).then((data) =>
            setResource(data)
          );
          emps(user.resp[0].project_id, user, empObj, empPic).then((data) =>
            setEmpPro(data)
          );
        })
        .catch((err) => console.log(err.message));
    }

    return acc;
  }, {});

  useEffect(() => {
    var initial_activity;

    axios
      .post("https://www.nrwlpms.org/api/api/get_all_employee.php", {
        jwt: user.token,
      })
      .then((response) => {
        setEmp(response.data.data);
      });

    axios
      .post("https://www.nrwlpms.org/api/api/get_all_activity.php", {
        jwt: user.token,
      })
      .then((response) => {
        setActivity(
          response.data.data.reduce((acc, cur) => {
            acc[cur.activity_id] = cur.activity_name;
            return acc;
          }, {})
        );
      })
      .catch((err) => console.log(err.message));

    axios
      .post(
        "https://www.nrwlpms.org/api/api/get_activity_project_by_project_id.php",
        {
          project_id: user.resp[0].project_id,
          jwt: user.token,
        }
      )
      .then((response) => {
        console.log(response.data.data);
        setProjectActivity(response.data.data);
        setSelectedActivity(response.data.data[0].activity_id);
        const req = JSON.stringify({
          project_id: user.resp[0].project_id,
          activity_id: response.data.data[0].activity_id,
          date: moment(new Date()).format("YYYY-MM-DD"),
          jwt: user.token,
        });
        console.log(req);
        axios
          .post(
            "https://www.nrwlpms.org/api/api/get_resourse_report_by_date_by_activity_id_and_by_project_id.php",
            req
          )
          .then((response) => {
            setData(response.data.data);
          })
          .catch((err) => console.log(err));
        axios
          .post(
            "https://www.nrwlpms.org/api/api/get_employee_report_by_date_by_activity_id_and_by_project_id.php",
            req
          )
          .then((response) => {
            console.log(response.data);
            setData_emp(response.data.data);
          });
      });
  }, []);

  const selectProject = async (value) => {
    console.log(value);
    setSelectedProject(value);
    ResourceMenu(value, user).then((data) => {
      setResource(data);
    });
    console.log(resource);
    axios
      .post(
        "https://www.nrwlpms.org/api/api/get_activity_project_by_project_id.php",
        {
          project_id: value,
          jwt: user.token,
        }
      )
      .then((response) => {
        setProjectActivity(response.data.data);
        console.log(activity);
        setSelectedActivity(response.data.data[0].activity_id);

        console.log(ap);
        axios
          .post(
            "https://www.nrwlpms.org/api/api/get_employee_report_by_date_by_activity_id_and_by_project_id.php",
            {
              project_id: value,
              activity_id: response.data.data[0].activity_id,
              date: moment(new Date()).format("YYYY-MM-DD"),
              jwt: user.token,
            }
          )
          .then((response) => {
            console.log(response.data);
            setData_emp(response.data.data);
          });

        axios
          .post(
            "https://www.nrwlpms.org/api/api/get_resourse_report_by_date_by_activity_id_and_by_project_id.php",
            {
              project_id: value,
              activity_id: response.data.data[0].activity_id,
              date: moment(new Date()).format("YYYY-MM-DD"),
              jwt: user.token,
            }
          )
          .then((response) => {
            setData(response.data.data);
          })
          .catch((err) => console.log(err));
      })
      .catch((err) => console.log(err.message));
  };

  const selectActivityProject = async (values) => {
    console.log(values);

    console.log(ap);
    await axios
      .post(
        "https://www.nrwlpms.org/api/api/get_resourse_report_by_date_by_activity_id_and_by_project_id.php",
        {
          project_id: selectedProject,
          activity_id: values,
          date: moment(new Date()).format("YYYY-MM-DD"),
          jwt: user.token,
        }
      )
      .then((response) => {
        axios
          .post(
            "https://www.nrwlpms.org/api/api/get_employee_report_by_date_by_activity_id_and_by_project_id.php",
            {
              project_id: selectedProject,
              activity_id: values,
              date: moment(new Date()).format("YYYY-MM-DD"),
              jwt: user.token,
            }
          )
          .then((response) => {
            console.log(response.data);
            setData_emp(response.data.data);
          });

        setSelectedActivity(values);
        setData(response.data.data);
      })
      .catch((err) => console.log(err));
  };

  const column_emp = [
    { title: "Employee", field: "employee_project_id", lookup: empPro },
    { title: "Started Working at", field: "work_hrs_from", type: "time" },
    { title: "Ended Working at", field: "work_hrs_to", type: "time" },
    { title: "Total Working Hours", field: "work_total_hrs" },
  ];

  const column = [
    { title: "Resources", field: "resource_id", lookup: resource },
    {
      title: "Engine Beggining Hours",
      field: "engine_hrs_beg",
      initialEditValue: moment(date).format("hh-mm-ss"),
      type: "time",
    },
    {
      title: "Engine Ending Hours",
      field: "engine_hrs_end",
      initialEditValue: "",
      type: "time",
    },
    {
      title: "Operational Hours From",
      field: "operational_hrs_from",
      initialEditValue: moment(date).format("hh-mm-ss"),
      type: "time",
    },

    {
      title: "Operational Hours To",
      field: "operational_hrs_to",
      initialEditValue: moment(date).format("hh-mm-ss"),
      type: "time",
    },
    {
      title: "Total Operational Hours",
      field: "operational_total_hrs",
      initialEditValue: 0,
      type: "number",
    },
    {
      title: "Idle Hours From",
      field: "idle_hrs_from",
      initialEditValue: moment(date).format("hh-mm-ss"),
      type: "time",
    },
    {
      title: "Idle Hours To",
      field: "idle_hrs_to",
      initialEditValue: moment(date).format("hh-mm-ss"),
      type: "time",
    },
    {
      title: "Idle Total Hours",
      field: "idle_total_hrs",
      initialEditValue: 0,
      type: "number",
    },
    {
      title: "Idle Reason",
      field: "idle_reason",
      initialEditValue: "",
    },

    {
      title: "Idle Total Hours",
      field: "operational_hrs_from",
      initialEditValue: 0,
      type: "number",
    },
    {
      title: "Down Hours From",
      field: "down_hrs_from",
      initialEditValue: moment(date).format("hh-mm-ss"),
      type: "time",
    },
    {
      title: "Down Hours To",
      field: "down_hrs_to",
      initialEditValue: moment(date).format("hh-mm-ss"),
      type: "time",
    },
    {
      title: "Down Total Hours",
      field: "down_total_hrs",
      type: "number",
      initialEditValue: 0,
    },

    {
      title: "Down Reason",
      field: "down_reason",
      initialEditValue: 0,
    },
    {
      title: "Fuel",
      field: "fuel",
      type: "number",
      initialEditValue: 0,
    },
  ];

  //mat_id is not set error prevented you from doing the update part of the resource report table

  const deleteActivityReport = async (mnpr_id) => {
    await axios
      .post("https://www.nrwlpms.org/api/api/delete_ActivityReport.php", {
        mnpr_id: mnpr_id,
        jwt: user.token,
      })
      .then((response) => {
        console.log(response.data.message);
      })
      .catch((err) => {
        console.log(err.message);
      });
  };

  const addActivityReport = async (newData) => {
    const aps = AP_id();
    const req = {
      activity_project_id: aps[selectedActivity],
      executed_quantity: exec,
      date: moment(new Date()).format("YYYY-MM-DD"),
      employee_project_id: newData.employee_project_id,
      work_hrs_from: moment(newData.work_hrs_from, "H:mm:ss").format("H:mm:ss"),
      work_hrs_to: moment(newData.work_hrs_to, "H:mm:ss").format("H:mm:ss"),
      work_total_hrs: dateDifference(
        moment(newData.work_hrs_to, "H:mm:ss"),
        moment(newData.work_hrs_from, "H:mm:ss")
      ),
    };

    console.log(req);
    await axios
      .post(
        "https://www.nrwlpms.org/api/api/create_quantity_surveyor_data.php",
        {
          data: req,
          jwt: user.token,
        }
      )
      .then((response) => {
        console.log(response.data.message);
        const temp = {
          ...req,
          material_report_id: response.data.material_report_id,
          activity_report_id: response.data.activity_report_id,
        };
        setData([...data, temp]);
      });
  };

  const updateActivityReport = async (newData) => {
    await axios
      .post("https://www.nrwlpms.org/api/api/update_ActivityReport.php", {
        ...newData,
        jwt: user.token,
      })
      .then((response) => console.log(response.data.message))
      .catch((err) => console.log(err.message));
  };

  const deleteMaterialProjectTable = async (emp_id) => {
    console.log(emp_id);

    await axios
      .post("https://www.nrwlpms.org/api/api/delete_resourse_report.php", {
        ...emp_id,
        jwt: user.token,
      })
      .then((response) => {
        console.log(response.data.message);
      })
      .catch((err) => {
        console.log(err.message);
      });
  };

  const addMaterialProjectTable = async (newData) => {
    const aps = AP_id();
    console.log(newData);
    const ds = {
      data: {
        activity_project_id: aps[selectedActivity],
        executed_quantity: exec,
        date: moment(new Date()).format("YYYY-MM-DD"),
        resource_id: newData.resource_id,
        engine_hrs_beg: moment(newData.engine_hrs_beg, "H:mm:ss").format(
          "H:mm:ss"
        ),
        engine_hrs_end: moment(newData.engine_hrs_end, "H:mm:ss").format(
          "H:mm:ss"
        ),
        operational_hrs_from: moment(
          newData.operational_hrs_from,
          "H:mm:ss"
        ).format("H:mm:ss"),
        operational_hrs_to: moment(
          newData.operational_hrs_to,
          "H:mm:ss"
        ).format("H:mm:ss"),
        operational_total_hrs: dateDifference(
          moment(newData.operational_hrs_to, "H:mm:ss"),
          moment(newData.operational_hrs_from, "H:mm:ss")
        ),
        idle_hrs_from: moment(newData.idle_hrs_from, "H:mm:ss").format(
          "H:mm:ss"
        ),
        idle_hrs_to: moment(newData.idle_hrs_to, "H:mm:ss").format("H:mm:ss"),
        idle_total_hrs: dateDifference(
          moment(newData.idle_hrs_to, "H:mm:ss"),
          moment(newData.idle_hrs_from, "H:mm:ss")
        ),
        idle_reason: newData.idle_reason,
        down_hrs_from: moment(newData.down_hrs_from, "H:mm:ss").format(
          "H:mm:ss"
        ),
        down_hrs_to: moment(newData.down_hrs_to, "H:mm:ss").format("H:mm:ss"),
        down_total_hrs: dateDifference(
          moment(newData.down_hrs_to, "H:mm:ss"),
          moment(newData.down_hrs_from, "H:mm:ss")
        ),
        down_reason: newData.down_reason,
        fuel: newData.fuel,
      },

      jwt: user.token,
    };
    console.log(ds);

    await axios
      .post(
        "https://www.nrwlpms.org/api/api/create_quantity_surveyor_data.php",
        ds
      )
      .then((response) => {
        console.log(response.data.message);

        if (
          response.data.message.localeCompare(
            "Insertion at resource report after existant is not successful"
          ) < 0
        ) {
          const newTemp = {
            ...ds.data,
            resourse_report_id: response.data.resourse_report_id,
            activity_report_id: response.data.activity_report_id,
          };
          console.log(newTemp);

          setData([...data, newTemp]);
        } else {
          console.log("All resources for this project has already been deployed!");
        }
      })
      .catch((err) => console.log(err.message));
  };

  const updateMaterialProjectTable = async (newData, oldData) => {
    const aps = AP_id();
    console.log(newData);
    const ds = {
      resrep_id: newData.id,
      activity_report_id: aps[selectedActivity],
      executed_quantity: exec,
      date: moment(date).format("YYYY-MM-DD"),
      resource_id: newData.resource_id,
      engine_hrs_beg: moment(newData.engine_hrs_beg, "H:mm:ss").format(
        "H:mm:ss"
      ),
      engine_hrs_end: moment(newData.engine_hrs_end, "H:mm:ss").format(
        "H:mm:ss"
      ),
      operational_hrs_from: moment(
        newData.operational_hrs_from,
        "H:mm:ss"
      ).format("H:mm:ss"),
      operational_hrs_to: moment(newData.operational_hrs_to, "H:mm:ss").format(
        "H:mm:ss"
      ),
      operational_total_hrs: dateDifference(
        moment(newData.operational_hrs_to, "H:mm:ss"),
        moment(newData.operational_hrs_from, "H:mm:ss")
      ),
      idle_hrs_from: moment(newData.idle_hrs_from, "H:mm:ss").format("H:mm:ss"),
      idle_hrs_to: moment(newData.idle_hrs_to, "H:mm:ss").format("H:mm:ss"),
      idle_total_hrs: dateDifference(
        moment(newData.idle_hrs_to, "H:mm:ss"),
        moment(newData.idle_hrs_from, "H:mm:ss")
      ),
      idle_reason: newData.idle_reason,
      down_hrs_from: moment(newData.down_hrs_from, "H:mm:ss").format("H:mm:ss"),
      down_hrs_to: moment(newData.down_hrs_to, "H:mm:ss").format("H:mm:ss"),
      down_total_hrs: dateDifference(
        moment(newData.down_hrs_to, "H:mm:ss"),
        moment(newData.down_hrs_from, "H:mm:ss")
      ),
      down_reason: newData.down_reason,
      fuel: newData.fuel,
      jwt: user.token,
    };
    const dss = {
      id: newData.id,
      activity_report_id: aps[selectedActivity],
      executed_quantity: exec,
      date: moment(date).format("YYYY-MM-DD"),
      resource_id: newData.resource_id,
      engine_hrs_beg: moment(newData.engine_hrs_beg, "H:mm:ss").format(
        "H:mm:ss"
      ),
      engine_hrs_end: moment(newData.engine_hrs_end, "H:mm:ss").format(
        "H:mm:ss"
      ),
      operational_hrs_from: moment(
        newData.operational_hrs_from,
        "H:mm:ss"
      ).format("H:mm:ss"),
      operational_hrs_to: moment(newData.operational_hrs_to, "H:mm:ss").format(
        "H:mm:ss"
      ),
      operational_total_hrs: dateDifference(
        moment(newData.operational_hrs_to, "H:mm:ss"),
        moment(newData.operational_hrs_from, "H:mm:ss")
      ),
      idle_hrs_from: moment(newData.idle_hrs_from, "H:mm:ss").format("H:mm:ss"),
      idle_hrs_to: moment(newData.idle_hrs_to, "H:mm:ss").format("H:mm:ss"),
      idle_total_hrs: dateDifference(
        moment(newData.idle_hrs_to, "H:mm:ss"),
        moment(newData.idle_hrs_from, "H:mm:ss")
      ),
      idle_reason: newData.idle_reason,
      down_hrs_from: moment(newData.down_hrs_from, "H:mm:ss").format("H:mm:ss"),
      down_hrs_to: moment(newData.down_hrs_to, "H:mm:ss").format("H:mm:ss"),
      down_total_hrs: dateDifference(
        moment(newData.down_hrs_to, "H:mm:ss"),
        moment(newData.down_hrs_from, "H:mm:ss")
      ),
      down_reason: newData.down_reason,
      fuel: newData.fuel,
    };
    console.log(ds);
    await axios
      .post(
        "https://www.nrwlpms.org/api/api/update_quantity_surveyor_data.php",
        ds
      )
      .then((response) => {
        console.log(response.data.message);
        const dataUpdate = [...data];
        const index = oldData.tableData.id;

        dataUpdate[index] = dss;
        setData([...dataUpdate]);
      })
      .catch((err) => console.log(err.message));
  };
  return (
    <div>
      <Grid container direction={"row"} spacing={7}>
        <Grid item>
          <Typography variant={"h6"}>Assigned Projects:</Typography>
          <TextField
            select
            value={selectedProject}
            onChange={(value) => selectProject(value.target.value)}
          >
            {project.map((pro) => (
              <MenuItem divider key={pro.project_id} value={pro.project_id}>
                {pro.pro_name}
              </MenuItem>
            ))}
          </TextField>
        </Grid>
        <Grid item>
          <Typography variant={"h6"}>Executed Quantity:</Typography>
          <TextField
            type={"number"}
            onChange={(value) => setExec(value.target.value)}
            name="exec"
            size={"small"}
            value={exec}
          />

          <IconButton>
            <Save />
          </IconButton>
        </Grid>
        <Grid item>
          <Typography variant={"h6"}>Activities:</Typography>
          <TextField
            value={selectedActivity}
            select
            onChange={(value) => selectActivityProject(value.target.value)}
          >
            {projectActivity.map((pro) => {
              return (
                <MenuItem divider key={pro.activity_id} value={pro.activity_id}>
                  {activity[pro.activity_id]}
                </MenuItem>
              );
            })}
          </TextField>
        </Grid>
      </Grid>
      <MaterialTable
        icons={tableIcons}
        title="Quantity Surveryor"
        tableRef={tableRef}
        columns={column}
        data={data}
        components={{
          Toolbar: (props) => (
            <div style={{ display: "flex", justifyContent: "center" }}>
              <MTableToolbar {...props} />
            </div>
          ),
        }}
        options={{
          actionsColumnIndex: -1,
          rowStyle: (rowData) => ({
            backgroundColor:
              selectedRow === rowData.tableData.id ? "#EEE" : "#FFF",
          }),
          headerStyle: {
            fontWeight: "bold",
            headerStyle: { position: "sticky", top: 0 },
            maxBodyHeight: 500,
            width: "100%",
          },
        }}
        components={{
          Toolbar: (props) => (
            <div
              style={{
                display: "flex",
                justifyContent: "center",
                color: "white",
                backgroundColor: "#1976d2",
              }}
            >
              <MTableToolbar {...props} />
            </div>
          ),
        }}
        editable={{
          onRowAdd: (newData) =>
            new Promise((resolve) => {
              setTimeout(() => {
                addMaterialProjectTable(newData);

                resolve();
              }, 1000);
            }),
          onRowUpdate: (newData, oldData) =>
            new Promise((resolve) => {
              console.log(newData, oldData);
              setTimeout(() => {
                updateMaterialProjectTable(newData, oldData);

                resolve();
              }, 1000);
            }),
          onRowDelete: (oldData) =>
            new Promise((resolve) => {
              setTimeout(() => {
                const dataDelete = [...data];
                const index = oldData.tableData.id;
                dataDelete.splice(index, 1);
                deleteMaterialProjectTable(oldData);
                setData([...dataDelete]);
                resolve();
              }, 1000);
            }),
        }}
        onRowClick={(evt, selectedRow) =>
          setSelectedRow(selectedRow.tableData.id)
        }
        options={{
          exportButton: true,
          exportCsv: (columns, data) => {
            console.log(data);
            const fData = {
              activity_project_id: 9,
              executed_quantity: exec,
              date: moment(date).format("YYYY-MM-DD"),
              data: data,
              jwt: user.token,
            };

            axios
              .post(
                "https://www.nrwlpms.org/api/api/save_quantity_surveyor_data.php",
                JSON.stringify(fData)
              )
              .then((response) => console.log(response.data))
              .catch((err) => console.log(err.message));
            console.log(fData);
          },
        }}
      />

      <MaterialTable
        icons={tableIcons}
        title="ActivityReport"
        tableRef={tableRef_emp}
        columns={column_emp}
        data={data_emp}
        options={{
          actionsColumnIndex: -1,
          rowStyle: (rowData) => ({
            backgroundColor:
              selectedRow_emp === rowData.tableData.id ? "#EEE" : "#FFF",
          }),
          headerStyle: {
            fontWeight: "bold",
            headerStyle: { position: "sticky", top: 0 },
            maxBodyHeight: 500,
          },
        }}
        components={{
          Toolbar: (props) => (
            <div style={{ display: "flex", justifyContent: "center" }}>
              <MTableToolbar {...props} />
            </div>
          ),
        }}
        editable={{
          onRowAdd: (newData) =>
            new Promise((resolve, reject) => {
              setTimeout(() => {
                addActivityReport(newData);
                resolve();
              }, 1000);
            }),
          onRowUpdate: (newData, oldData) =>
            new Promise((resolve, reject) => {
              setTimeout(() => {
                const dataUpdate = [...data];
                const index = oldData.tableData.id;
                updateActivityReport(newData);
                dataUpdate[index] = newData;
                setData([...dataUpdate]);
                resolve();
              }, 1000);
            }),
          onRowDelete: (oldData) =>
            new Promise((resolve, reject) => {
              setTimeout(() => {
                const dataDelete = [...data];
                const index = oldData.tableData.id;
                dataDelete.splice(index, 1);
                deleteActivityReport(oldData.mnpr_id);
                setData([...dataDelete]);
                resolve();
              }, 1000);
            }),
        }}
        onRowClick={(evt, selectedRow) =>
          setSelectedRow_emp(selectedRow.tableData.id)
        }
      />
    </div>
  );
}

export default Manpower;
